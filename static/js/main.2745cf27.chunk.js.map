{"version":3,"sources":["components/Email.js","components/Contact.js","components/ContactList.js","App.js","reportWebVitals.js","index.js"],"names":["Email","email","toggleEmail","isEnabled","className","onClick","Contact","contact","isLoading","editContact","saveNewContact","deleteContact","cancelChanges","useState","firstName","setFirstName","lastName","setLastName","emails","setEmails","newEmails","setNewEmails","tempEmails","tempEmailIndex","findIndex","el","splice","push","createBody","allEmails","filter","em","length","trim","CrudButtons","id","type","useEffect","onSubmit","e","preventDefault","new","handleSubmit","htmlFor","name","onChange","target","value","placeholder","required","autoFocus","sort","map","index","includes","newEmail","editNewEmail","tempNewEmails","prevState","icon","faPlusCircle","ContactList","contacts","selectContact","addContact","Contacts","a","b","toUpperCase","person","App","isMounted","setIsMounted","setIsLoading","setContacts","newContact","Date","now","setContact","contactId","find","fetch","then","response","json","data","catch","error","console","undefined","body","requestOptions","method","headers","JSON","stringify","tempData","log","tempIndex","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2745cf27.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css'\nimport { RiDeleteBack2Fill  } from 'react-icons/ri';\nimport { AiOutlineUndo } from 'react-icons/ai';\n\n\nconst Email = ({\n    email, \n    toggleEmail,\n    isEnabled\n  }) => {\n\n  return (\n    <li className={ isEnabled ? '': 'deselected'}\n    onClick={()=>{\n      toggleEmail(email, isEnabled)\n    }}\n    >\n      <p className=\"contact-email\"\n      >\n        {email}\n      </p>\n    \n      {\n        isEnabled\n        ?<span className=\"contact-delete-email\"\n        ><RiDeleteBack2Fill/></span>\n        : <span className=\"contact-restore-email\"\n        ><AiOutlineUndo/></span>\n      }\n    </li>\n  );\n}\n\nexport default Email;\n","import React, { useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\nimport { RiDeleteBack2Fill  } from 'react-icons/ri';\nimport Email from './Email';\nconst Contact = ({ \n    contact, \n    isLoading, \n    editContact, \n    saveNewContact, \n    deleteContact,\n    cancelChanges, \n    }) => {\n  const [firstName, setFirstName] = useState(contact?.firstName);\n  const [lastName, setLastName] = useState(contact?.lastName);\n  const [emails, setEmails] = useState([...contact.emails]);\n  const [newEmails, setNewEmails] = useState([]);\n\n  const toggleEmail = (email, isEnabled) => {\n    const tempEmails =  [...emails]\n    if (isEnabled){\n      const tempEmailIndex = tempEmails.findIndex(el=>el===email)\n      tempEmails.splice(tempEmailIndex, 1)\n      setEmails(tempEmails)\n    } else {\n      tempEmails.push(email)\n      setEmails(tempEmails)\n    }\n  }\n\n  const addEmail = () => {\n    setNewEmails(prevState=> [...prevState,''])\n  }\n\n\n  const editNewEmail = (e, index) => {\n    const tempEmails = [...newEmails]\n     tempEmails[index] = e.target.value\n    setNewEmails(tempEmails)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (!!contact.new && contact.new){\n      saveNewContact(createBody())\n      setNewEmails([])\n    } else {\n      editContact(contact.id, createBody())\n      setNewEmails([])\n    }\n  }\n\n  const createBody = () =>{\n    const allEmails = [...emails]\n    allEmails.push(...newEmails.filter(em=>em.length>4))\n    const body = {\n      'firstName': firstName.trim(),\n      'lastName': lastName.trim(),\n      'emails': allEmails,\n    }\n    return body\n  }\n\n  const CrudButtons = () => {\n    return(\n      <section className=\"crud-buttons\">\n        <button className=\"delete\"\n          onClick={()=>deleteContact(contact.id)}\n         type=\"button\"\n        >Delete</button>\n        <div>\n          <button className=\"cancel\"\n            onClick={()=>{\n              setFirstName(contact.firstName)\n              setLastName(contact.lastName)\n              setEmails([...contact.emails])\n              setNewEmails([])\n              cancelChanges(contact.id)\n            }}   \n            type=\"button\"       \n          >Cancel</button>\n          <button className=\"save\" \n          type='submit'\n          >Save</button>\n        </div>\n      </section>\n    )\n  }\n\n  useEffect(() => {\n    if(!!contact){\n      setFirstName(contact.firstName)\n      setLastName(contact.lastName)\n      setEmails([...contact.emails])\n    } else {\n      setFirstName('')\n      setLastName('')\n      setEmails([])\n    }\n    setNewEmails([])\n  }, [contact]);\n\n  return (\n    <form className=\"contact\"\n    onSubmit={(e)=>{handleSubmit(e)}}\n    >\n      {\n        isLoading \n        ? <h3 className=\"loading\">Loading...</h3>\n        : <fieldset>\n          <section className=\"edit-name\">\n            <div className=\"edit-name__first\">\n              <label htmlFor=\"contact-first-name\" >First Name</label>\n              <input type=\"text\" id=\"contact-first-name\" name=\"first-name\" \n              onChange={(e)=>{\n                setFirstName(e.target.value)\n              }}\n              value={firstName}\n              placeholder=\"Enter first name...\"\n              required\n              autoFocus\n              />\n            </div>\n            <div className=\"edit-name__last\">\n              <label htmlFor=\"contact-last-name\">Last Name</label>\n              <input type=\"text\" id=\"contact-last-name\" name=\"last-name\" \n              onChange={(e)=>{\n                setLastName(e.target.value)\n              }}\n              value={lastName}\n              placeholder=\"Enter last name...\"\n              required\n              />\n            </div>\n          </section>\n          <section name=\"contact-emails\" className=\"contact-emails\">\n            <label htmlFor=\"contact-emails\">Email</label>\n            <ul>\n              {\n                !!contact && !!contact.emails \n                && contact.emails.sort().map((email,index)=> {\n                  return(\n                    <Email email={email}\n                      isEnabled={emails.includes(email)}\n                      contact={contact} \n                      toggleEmail={toggleEmail}\n                      key={`contact-${contact.id}-email-${index}`}\n                    />\n                  )\n                })\n              }\n              {\n                newEmails.map((newEmail,index)=>{\n                  return(\n                    <li key={`new-contact-${contact.id}-email-${index}`}>\n                      <input\n                      placeholder='Enter new email...' \n                      value={newEmail}\n                      onChange={(e)=>editNewEmail(e, index)}\n                      key={`new-email-${index}`}\n                      type='email'\n                      required\n                      />\n                      <span className=\"contact-delete-email\"\n                          onClick={()=>{\n                            const tempNewEmails = [...newEmails]\n                            tempNewEmails.splice(index, 1)\n                            setNewEmails(tempNewEmails)\n                          }}\n                      ><RiDeleteBack2Fill/></span>\n                    </li>\n                  )\n                })\n              }\n              <li className=\"add-email\" onClick={()=>addEmail()}>\n                <div>\n                  <FontAwesomeIcon icon={faPlusCircle} />\n                </div>  \n                <p>add email</p>\n              </li>\n            </ul>\n          </section>\n          <CrudButtons/>\n        </fieldset>\n      }\n    </form>\n  );\n}\n\nexport default Contact;\n","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlusCircle } from '@fortawesome/free-solid-svg-icons'\n\n\nconst ContactList = ({ isLoading, contacts, contact, selectContact, addContact }) => {\n  const Contacts = () =>{\n    return(\n      <ul>\n        { \n          !isLoading && !!contacts && contacts.length > 0 \n          && contacts.sort((a,b)=>{\n            return a.firstName.toUpperCase() > b.firstName.toUpperCase()\n          })\n          .sort((a,b)=>{\n            return a.lastName.toUpperCase() > b.lastName.toUpperCase()\n          })\n          .map((person)=>{\n              return(\n                <li className={`contact-list__item ${!!contact && contact.id === person.id && 'selected'}`}\n                onClick={()=>selectContact(person.id)}\n                key={`new-contact-${person.id}`}\n                >\n                  {person.firstName} {person.lastName}\n                </li>\n              )\n          })\n        }\n        {\n          !!contact && !!contact.new && contact.new\n          && <li className={`contact-list__item new selected`}\n            >\n              (new contact)\n            </li>\n        }\n      </ul>\n    )\n  }\n\n  return (\n    <div className=\"contact-list\">\n      <header>\n        <h1>Contacts</h1>\n        <div className=\"contact-list__icon\"\n        onClick={()=>addContact()}>\n          <FontAwesomeIcon icon={faPlusCircle} />\n        </div>\n      </header>\n      <Contacts/>   \n    </div>\n  );\n}\n\nexport default ContactList;\n","import React, {useState, useEffect,} from 'react';\nimport './App.css';\nimport Contact from './components/Contact';\nimport ContactList from './components/ContactList';\n\nfunction App() {\n  const [isMounted, setIsMounted] = useState(true);\n  const [isLoading, setIsLoading] = useState(true);\n  const [contacts, setContacts] = useState([]);\n\n  const newContact = () => {\n    return (\n      {\n        'firstName':'',\n        'lastName':'',\n        'emails':[],\n        'new':true,\n        'id': Date.now()\n      }\n    )\n  }\n\n  const [contact, setContact] = useState(newContact());\n\n  const selectContact=(contactId)=>{\n    setContact(contacts.find(person=>person.id===contactId))\n  }\n\n  const editContact=(contactId, body)=>{\n    setIsLoading(true)\n    const requestOptions = {\n      method: 'PUT',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body)\n    };\n    fetch(`https://avb-contacts-api.herokuapp.com/contacts/${contactId}`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const tempData = [...contacts]\n        tempData[tempData.findIndex(person=>person.id===data.id)] = data\n        setContacts(tempData)\n        setContact(data)\n      })\n      .then(setIsLoading(false))\n      .catch(e=>console.log(e))\n    }\n\n  const addContact=()=>{\n    setContact(newContact())\n  }\n\n  const saveNewContact=(body)=> {\n    setIsLoading(true)\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(body) \n    };\n    fetch(`https://avb-contacts-api.herokuapp.com/contacts/`, requestOptions)\n      .then(response => response.json())\n      .then(data => {\n        const tempData = [...contacts]\n        tempData.push(data)\n        setContacts(tempData)\n        setContact(data)\n      })\n      .then(setIsLoading(false))\n      .catch(e=>console.log(e))\n    }\n\n  const deleteContact=(contactId)=>{\n    setIsLoading(true)\n    if (contact.new){\n      setContact(contacts[0])\n    } else {\n      const requestOptions = {\n        method: 'DELETE',\n        headers: { 'Content-Type': 'application/json' },\n      };\n      fetch(`https://avb-contacts-api.herokuapp.com/contacts/${contactId}`, requestOptions)\n        .then(data => {\n          const tempData = [...contacts]\n          const tempIndex = tempData.findIndex(person=>person.id===contactId)\n          tempData.splice(tempIndex,1)\n          if (tempIndex < tempData.length && tempData.length >0){\n            setContact(tempData[tempIndex])\n          } else if(tempData.length > 0) {\n            setContact(tempData[0])\n          } else {\n            setContact(newContact())\n          }\n          setContacts(tempData)\n        })\n        .then(setIsLoading(false))\n        .catch(e=>console.log(e))\n      }\n  }\n\n  const cancelChanges = (id) => {\n    if(contact.new){\n      setContact(contacts[0])\n    } else {\n      selectContact(id)\n    }\n  }\n\n  useEffect(() => {\n    if(isMounted){\n      fetch('https://avb-contacts-api.herokuapp.com/contacts/paginated')\n      .then( response =>response.json())\n      .then(data=>{\n        setContacts(data.contacts)\n        if (data.contacts.length > 0 && !!contact ){\n          setContact(data.contacts[0])\n        }\n      })\n      .then(setIsMounted(false))\n      .then(setIsLoading(false))\n      .catch(error => {\n        console.error('There was an error!', error);\n      });\n    }\n  }, [contacts, contact, isMounted]);\n\n  useEffect(()=>{\n   if(contact === undefined && !!contacts){\n      setContact(contacts[0])\n    } else if (contact === undefined && contacts.length === 0) {\n      setContact(newContact())\n    }\n  },[contact,contacts])\n\n  return (\n    <div className=\"app\"\n    >\n        <ContactList isLoading={isLoading} \n          contacts={contacts} \n          selectContact={selectContact}\n          addContact={addContact}\n          contact={contact}\n        />\n        <Contact contact={contact} \n          isLoading={isLoading}\n          editContact={editContact}\n          saveNewContact={saveNewContact}\n          deleteContact={deleteContact}\n          cancelChanges={cancelChanges}\n          />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}